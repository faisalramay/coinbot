var Redis = require('ioredis');
var async = require('async');
var _ = require('underscore');
var config = require('../config');
var simulation = require('../model/simulation');
var portfolio = require('../model/portfolio');
var execute = require('../model/trade');
var CronJob = require('cron').CronJob;

var redis = new Redis(config.redis.port);

// IMPORTANT: Make sure this is different for each simulation
var sim = 'simulation_2';

// DEFAULT VALUES: Only used when the simulation is run for the first time
// subsequent runs will take these values from Redis (if updated via webserver)
var sim_portfolio = { 'coins': {'USDT': 1000}, 'base_coin': 'USDT'};
var sim_watch = ['ETH', 'BTC', 'LTC', 'XRP', 'ETC', 'ZEC', 'NXT', 'STR', 'DASH', 'XMR', 'REP' ];
var sim_buy_at = 1.03;
var sim_sell_at = 0.98;
var sim_duration = 4;
var sim_max_allocation = 0.3;

var job = new CronJob('* * * * * *', function() {
	// This function runs every second
	
	// Initialize portfolio (from redis) on each cycle
	var pfolio = {};
	var watching = [];
	var possible_trades = [];
	var filtered_trades = [];
	
	async.series([
	
		function(callback){
			// Get current portfolio
			portfolio.getPortfolio(sim, function(err, result){
				pfolio = result;
				if (pfolio['value'] <= 0) {
					console.log('Portfolio has not been initialized, let\'s do that...');
					portfolio.initializePortfolio(sim, sim_portfolio['coins'], sim_portfolio['base_coin'], sim_max_allocation, function(err){
						console.log('Initialized portfolio...');
					});
				}
				callback();
			});
		},
		
		function (callback) {
			// Get coins we are watching
			simulation.getWatchedCoins(sim, function(err, results){
				watching = results;
				if ( _.isEmpty(results) ) {
					simulation.initializeSimulation(sim, sim_watch, sim_buy_at, sim_sell_at, sim_duration, function(err){
						watching = sim_watch;
						console.log('Initialized simulation...');
					});
				}
				callback();
			});
		},
		
		function (callback){
			// Process all coins we are watching - see what we might want to do!
			async.each(watching, function(coin, callback){
				// console.log('processing coin: ' + coin);
				simulation.processTicker(sim, pfolio['base_coin'] + '_' + coin, function(err, trade){
					if (err) console.log('error processing ticker: ' + ticker);
					
					if ( ! _.isEmpty(trade) ) possible_trades.push(trade);
					callback();
				});
				
			}, function(err, trade){
				if (err) console.log('error processing tickers!');
				
				callback();
			});
		},
		
		function (callback){
			// Filter trades
			simulation.filterTrades(possible_trades, pfolio, function(err, results){
				filtered_trades = results;
				callback();
			});
		}
	
	], function(err){
		if (err) console.log('error in simulation');
		
		async.eachSeries(filtered_trades, function(trade, callback){
			console.log('processing trade...');
			console.log(trade);
			execute.process(trade, function(err){
				if (err) console.log('error processing trade!');
				
				console.log('processed trade!');
				callback();
			});
			
		}, function(err, trade){
			if (err) console.log('error processing trades!');
		});
	});

},  function() {
	console.log('This is never called, because we never exit gracefully...');
}, true);